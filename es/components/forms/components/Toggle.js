import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["className", "id", "disabled"];
import React from 'react';
import _ from 'underscore';
import { randomId } from './../../util/object';
import { patchedConsoleInstance as console } from './../../util/patched-console';

/**
 * Wraps a checkbox input to turn it into a toggle switch using CSS.
 * Use just like a checkbox input element.
 *
 * @prop {string} id - A unique id. If not supplied, one is autogenerated.
 * @prop {function} onChange - Change event handler.
 * @prop {boolean} checked - Whether is checked or not.
 */
export var Toggle = /*#__PURE__*/React.memo(function (_ref) {
  var className = _ref.className,
    id = _ref.id,
    disabled = _ref.disabled,
    remainingProps = _objectWithoutProperties(_ref, _excluded);
  var useID = id || randomId();
  return /*#__PURE__*/React.createElement("div", {
    className: "onoffswitch " + className + (disabled ? ' disabled' : '')
  }, /*#__PURE__*/React.createElement("input", _extends({
    type: "checkbox",
    id: useID
  }, remainingProps, {
    className: "onoffswitch-checkbox",
    disabled: disabled
  })), /*#__PURE__*/React.createElement("label", {
    className: "onoffswitch-label",
    htmlFor: id
  }, /*#__PURE__*/React.createElement("span", {
    className: "onoffswitch-inner"
  }), /*#__PURE__*/React.createElement("span", {
    className: "onoffswitch-switch"
  })));
});
Toggle.defaultProps = {
  'name': 'onoffswitch',
  'onChange': function onChange() {
    console.log("Toggled ", this);
  },
  'id': null,
  'checked': false,
  'className': ''
};