import React from 'react';
import _ from 'underscore';
import { randomId } from './../../util/object';
import { patchedConsoleInstance as console } from './../../util/patched-console';

/**
 * Wraps a checkbox input to turn it into a toggle switch using CSS.
 * Use just like a checkbox input element.
 *
 * @prop {string} id - A unique id. If not supplied, one is autogenerated.
 * @prop {function} onChange - Change event handler.
 * @prop {boolean} checked - Whether is checked or not.
 */
export const Toggle = React.memo(function Toggle({
    className = "",
    id = null,
    disabled = false,
    name = "onoffswitch",
    onChange = (e) => { console.log("Toggled ", e.target); },
    checked = false,
    ...remainingProps
}) {
    const useID = id || randomId();
    return (
        <div className={"onoffswitch " + className + (disabled ? ' disabled' : '')}>
            <input type="checkbox" id={useID}
                name={name} onChange={onChange} checked={checked}
                className="onoffswitch-checkbox" disabled={disabled}
                {...remainingProps}
            />
            <label className="onoffswitch-label" htmlFor={id}>
                <span className="onoffswitch-inner"></span>
                <span className="onoffswitch-switch"></span>
            </label>
        </div>
    );
});


/** Pulled out into own component so can style/adjust-if-needed together w. Case Review Tab */
export const IconToggle = function IconToggle(props){
    const {
        activeIdx = 0,
        options = [],
        divCls = ""
    } = props;

    const renderedOptions = options.map(function(opt, optIdx){
        const { title, disabled, onClick, dataTip, btnCls = "btn-sm" } = opt;

        return (
            <div className="flex-grow-1" data-tip={dataTip} key={optIdx}>
                <button type="button" {...{ onClick, disabled }} aria-pressed={activeIdx === optIdx}
                    className={"btn btn-" + (activeIdx === optIdx ? "primary-dark active pe-none" : "link") + " " + btnCls}>
                    { title }
                </button>
            </div>
        );
    });
    return (
        <div className={"icon-toggle " + divCls}>
            { renderedOptions }
        </div>
    );
};